/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.tudelft.sem.template.user.api;

import java.util.UUID;
import nl.tudelft.sem.template.user.model.UserProfile;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-22T18:09:18.751+01:00[Europe/Berlin]")
@Validated
@Tag(name = "Author", description = "Everything related to authors")
public interface AuthorApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /author/view/{author_id} : Find author by ID.
     * Returns an author corresponding to the given ID.
     *
     * @param authorId ID of author to find (required)
     * @return successfully found (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Author not found (status code 404)
     */
    @Operation(
        operationId = "getAuthorByID",
        summary = "Find author by ID.",
        description = "Returns an author corresponding to the given ID.",
        tags = { "Author" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully found", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserProfile.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Author not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/author/view/{author_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserProfile>> getAuthorByID(
        @Parameter(name = "author_id", description = "ID of author to find", required = true, in = ParameterIn.PATH) @PathVariable("author_id") UUID authorId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" }, { \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /author/all : Find all authors.
     * Returns all the authors in the database as UserProfile&#39;s.
     *
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "getAuthors",
        summary = "Find all authors.",
        description = "Returns all the authors in the database as UserProfile's.",
        tags = { "Author" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserProfile.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/author/all",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserProfile>> getAuthors(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" }, { \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
