/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.tudelft.sem.template.user.api;

import java.util.UUID;
import nl.tudelft.sem.template.user.model.UserProfile;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-22T18:09:18.751+01:00[Europe/Berlin]")
@Validated
@Tag(name = "UserProfile", description = "Everything related to users' profiles")
public interface ProfileApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /profile/activate : Activate your account.
     * Toggle your account status to active.
     *
     * @param userId Your User ID (required)
     * @return Successfully Activated (status code 200)
     *         or Bad Request (status code 400)
     *         or User is prohibited (status code 401)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "activateAccount",
        summary = "Activate your account.",
        description = "Toggle your account status to active.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Activated"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "User is prohibited"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/profile/activate"
    )
    default ResponseEntity<Void> activateAccount(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /profile/deactivate : Deactivate your account.
     * Toggle your account status to inactive.
     *
     * @param userId Your User ID (required)
     * @return Successfully Deactivated (status code 200)
     *         or Bad Request (status code 400)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "deactivateAccount",
        summary = "Deactivate your account.",
        description = "Toggle your account status to inactive.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Deactivated"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/profile/deactivate"
    )
    default ResponseEntity<Void> deactivateAccount(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /profile/favoriteBook/{book_id} : Add book to favorites.
     * Add your favorite book, specified by book_id, as a user, possibly replacing the previous entry.
     *
     * @param userId Your User ID (required)
     * @param bookId Book ID of book selected as favorite. (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Book not found (status code 404)
     *         or Unauthorized operation (status code 401)
     */
    @Operation(
        operationId = "favoriteBook",
        summary = "Add book to favorites.",
        description = "Add your favorite book, specified by book_id, as a user, possibly replacing the previous entry.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Book not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/profile/favoriteBook/{book_id}"
    )
    default ResponseEntity<Void> favoriteBook(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "book_id", description = "Book ID of book selected as favorite.", required = true, in = ParameterIn.PATH) @PathVariable("book_id") String bookId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /profile/favoriteGenre/{genre_id} : Add genre to favourites.
     * Add your favorite genre as a user, specified by genre_id.
     *
     * @param userId Your User ID (required)
     * @param genreId Genre ID of genre selected as favorite. (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Genre not found (status code 404)
     *         or Unauthorized operation (status code 401)
     */
    @Operation(
        operationId = "favoriteGenre",
        summary = "Add genre to favourites.",
        description = "Add your favorite genre as a user, specified by genre_id.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Genre not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/profile/favoriteGenre/{genre_id}"
    )
    default ResponseEntity<Void> favoriteGenre(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "genre_id", description = "Genre ID of genre selected as favorite.", required = true, in = ParameterIn.PATH) @PathVariable("genre_id") String genreId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /profile/find : Get all user profiles that meet criteria.
     * Get all the user profiles that meet the criteria in the request body, like name, interests etc.
     *
     * @param userProfile  (optional)
     * @return Successful operation (status code 200)
     *         or Bad request (status code 400)
     *         or Users not found (status code 404)
     */
    @Operation(
        operationId = "findProfiles",
        summary = "Get all user profiles that meet criteria.",
        description = "Get all the user profiles that meet the criteria in the request body, like name, interests etc.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserProfile.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request"),
            @ApiResponse(responseCode = "404", description = "Users not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/profile/find",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<UserProfile>> findProfiles(
        @Parameter(name = "UserProfile", description = "") @Valid @RequestBody(required = false) UserProfile userProfile
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" }, { \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /profile/follow/{user_id_other} : Follow a user.
     * Follow another user, specified by user_id.
     *
     * @param userId Your User ID (required)
     * @param userIdOther User ID of user to follow (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or User not found (status code 404)
     *         or Unauthorized operation (status code 401)
     */
    @Operation(
        operationId = "followUser",
        summary = "Follow a user.",
        description = "Follow another user, specified by user_id.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfile.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/profile/follow/{user_id_other}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserProfile> followUser(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "user_id_other", description = "User ID of user to follow", required = true, in = ParameterIn.PATH) @PathVariable("user_id_other") UUID userIdOther
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /profile/view : Get your own profile.
     * Get the UserProfile of current user.
     *
     * @param userId Your User ID (required)
     * @return Successful operation (status code 200)
     *         or Unauthorized, invalid/missing ID in Header (status code 401)
     */
    @Operation(
        operationId = "getOwnProfile",
        summary = "Get your own profile.",
        description = "Get the UserProfile of current user.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfile.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized, invalid/missing ID in Header")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/profile/view",
        produces = { "application/json" }
    )
    default ResponseEntity<UserProfile> getOwnProfile(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /profile/proveAdmin : Prove you&#39;re an admin with an admin key.
     * Prove you&#39;re an admin using an admin key, which has been generated by another admin.
     *
     * @param userId Your User ID (required)
     * @param body  (optional)
     * @return Successfully Proved Admin (status code 200)
     *         or Bad Request (status code 400)
     *         or Admin Password Invalid or User prohibited (status code 401)
     *         or Invalid Input (status code 405)
     */
    @Operation(
        operationId = "proveAdmin",
        summary = "Prove you're an admin with an admin key.",
        description = "Prove you're an admin using an admin key, which has been generated by another admin.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Proved Admin"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Admin Password Invalid or User prohibited"),
            @ApiResponse(responseCode = "405", description = "Invalid Input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/profile/proveAdmin",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> proveAdmin(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) UUID body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /profile/proveAuthor : Prove you&#39;re an author with an author keyphrase.
     * Provide a string which contains the word \&quot;author\&quot; (case insensitive) to prove author identity.
     *
     * @param userId Your User ID (required)
     * @param body  (optional)
     * @return Successfully Activated (status code 200)
     *         or Bad Request (status code 400)
     *         or Author credentials invalid or User prohibited (status code 401)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "proveAuthor",
        summary = "Prove you're an author with an author keyphrase.",
        description = "Provide a string which contains the word \"author\" (case insensitive) to prove author identity.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully Activated"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Author credentials invalid or User prohibited"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/profile/proveAuthor",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> proveAuthor(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /profile/unfavoriteBook/{book_id} : Delete book from favourites.
     * Delete your favorite book as a user, specified by book_id.
     *
     * @param userId Your User ID (required)
     * @param bookId Book ID of book selected to delete as a favorite. (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Book not found (status code 404)
     *         or Unauthorized operation (status code 401)
     */
    @Operation(
        operationId = "unfavoriteBook",
        summary = "Delete book from favourites.",
        description = "Delete your favorite book as a user, specified by book_id.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Book not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/profile/unfavoriteBook/{book_id}"
    )
    default ResponseEntity<Void> unfavoriteBook(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "book_id", description = "Book ID of book selected to delete as a favorite.", required = true, in = ParameterIn.PATH) @PathVariable("book_id") String bookId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /profile/unfavoriteGenre/{genre_id} : Delete genre from favourites.
     * Delete one of your favorite genres as a user, specified by genre_id.
     *
     * @param userId Your User ID (required)
     * @param genreId Genre ID of genre selected to delete as a favorite. (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Genre not found (status code 404)
     *         or Unauthorized operation (status code 401)
     */
    @Operation(
        operationId = "unfavoriteGenre",
        summary = "Delete genre from favourites.",
        description = "Delete one of your favorite genres as a user, specified by genre_id.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Genre not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/profile/unfavoriteGenre/{genre_id}"
    )
    default ResponseEntity<Void> unfavoriteGenre(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "genre_id", description = "Genre ID of genre selected to delete as a favorite.", required = true, in = ParameterIn.PATH) @PathVariable("genre_id") String genreId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /profile/unfollow/{user_id_other} : Unfollow a user.
     * Unfollow another user, specified by user_id.
     *
     * @param userId Your User ID (required)
     * @param userIdOther User ID of user to unfollow (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or User not found (status code 404)
     *         or Unauthorized operation (status code 401)
     */
    @Operation(
        operationId = "unfollowUser",
        summary = "Unfollow a user.",
        description = "Unfollow another user, specified by user_id.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfile.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/profile/unfollow/{user_id_other}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserProfile> unfollowUser(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "user_id_other", description = "User ID of user to unfollow", required = true, in = ParameterIn.PATH) @PathVariable("user_id_other") UUID userIdOther
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /profile/modify : Update your own profile.
     * Update the UserProfile of the current user.
     *
     * @param userId Your User ID (required)
     * @param userProfile  (optional)
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized, invalid/missing ID in Header (status code 401)
     *         or Invalid Input (status code 405)
     */
    @Operation(
        operationId = "updateOwnProfile",
        summary = "Update your own profile.",
        description = "Update the UserProfile of the current user.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized, invalid/missing ID in Header"),
            @ApiResponse(responseCode = "405", description = "Invalid Input")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/profile/modify",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateOwnProfile(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "UserProfile", description = "") @Valid @RequestBody(required = false) UserProfile userProfile
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /profile/all : View all user profiles.
     * View all (viewable) UserProfile&#39;s in the system.
     *
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "viewAllProfiles",
        summary = "View all user profiles.",
        description = "View all (viewable) UserProfile's in the system.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserProfile.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/profile/all",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserProfile>> viewAllProfiles(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" }, { \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /profile/view/{user_id} : View the profile of a user.
     * View the UserProfile of a user specified by user_id, if viewable.
     *
     * @param userId User ID of profile to view (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or User Profile not found (status code 404)
     *         or Unauthorized operation (status code 401)
     */
    @Operation(
        operationId = "viewProfile",
        summary = "View the profile of a user.",
        description = "View the UserProfile of a user specified by user_id, if viewable.",
        tags = { "UserProfile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfile.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "User Profile not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/profile/view/{user_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserProfile> viewProfile(
        @Parameter(name = "user_id", description = "User ID of profile to view", required = true, in = ParameterIn.PATH) @PathVariable("user_id") UUID userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
