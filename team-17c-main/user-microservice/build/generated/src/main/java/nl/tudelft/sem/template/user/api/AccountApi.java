/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.tudelft.sem.template.user.api;

import java.util.UUID;
import nl.tudelft.sem.template.user.model.User;
import nl.tudelft.sem.template.user.model.UserAuth;
import nl.tudelft.sem.template.user.model.UserProfile;
import nl.tudelft.sem.template.user.model.UserWithoutPassword;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-22T18:09:18.751+01:00[Europe/Berlin]")
@Validated
@Tag(name = "User", description = "Everything related to the user credentials")
public interface AccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /account/create : Create a new user.
     * Create a user account using your username, (unique) email address and password.
     *
     * @param userAuth  (optional)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Email is already in use (status code 403)
     */
    @Operation(
        operationId = "createAccount",
        summary = "Create a new user.",
        description = "Create a user account using your username, (unique) email address and password.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfile.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "403", description = "Email is already in use")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserProfile> createAccount(
        @Parameter(name = "UserAuth", description = "") @Valid @RequestBody(required = false) UserAuth userAuth
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : 6, \"privacy\" : 0, \"bio\" : \"bio\", \"bookshelves\" : [ \"bookshelves\", \"bookshelves\" ], \"avatar\" : \"avatar\", \"favoriteBook\" : \"favoriteBook\", \"friends\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"favoriteGenres\" : [ \"favoriteGenres\", \"favoriteGenres\" ], \"followers\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"following\" : [ \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" ], \"name\" : \"name\", \"location\" : \"location\", \"state\" : 1, \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /account/delete : Delete your User Account.
     * Delete your own account.
     *
     * @param userId Your User ID (required)
     * @return Deleted User (status code 200)
     *         or Bad Request (status code 400)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "deleteAccount",
        summary = "Delete your User Account.",
        description = "Delete your own account.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Deleted User"),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/account/delete"
    )
    default ResponseEntity<Void> deleteAccount(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /account/modify : Update your account details.
     * Update the details of your own account.
     *
     * @param userId Your User ID (required)
     * @param user  (optional)
     * @return Updated User Account (status code 200)
     *         or Bad Request (status code 400)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "updateAccount",
        summary = "Update your account details.",
        description = "Update the details of your own account.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated User Account", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserWithoutPassword.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/account/modify",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserWithoutPassword> updateAccount(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId,
        @Parameter(name = "User", description = "") @Valid @RequestBody(required = false) User user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /account/view : View your account details, excluding your password.
     * View the details of your own account.
     *
     * @param userId Your User ID (required)
     * @return successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "viewAccount",
        summary = "View your account details, excluding your password.",
        description = "View the details of your own account.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserWithoutPassword.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/account/view",
        produces = { "application/json" }
    )
    default ResponseEntity<UserWithoutPassword> viewAccount(
        @NotNull @Parameter(name = "user_id", description = "Your User ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) UUID userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
